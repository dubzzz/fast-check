name: Build Status

on:
  push:
    branches:
      - main
      - 'next-*_*_*'
      - 'fix-v*'
    tags:
      - 'v**'
      - '*/v**'
  pull_request:
    branches:
      - main
      - 'next-*_*_*'
      - 'fix-v*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Root jobs
  warmup_yarn_cache:
    name: 'Warm up Yarn cache'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Using Node v18.x
        uses: actions/setup-node@v3
        id: yarn-cache
        with:
          node-version: '18.x'
          cache: 'yarn'
      - name: Update Yarn cache
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        env:
          # Using PNP linker for better performance
          YARN_NODE_LINKER: pnp
        run: yarn install --immutable
  warmup_yarn_cache_others:
    name: 'Warm up Yarn cache (others)'
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: ['macos-latest', 'windows-latest']
    steps:
      - uses: actions/checkout@v3
      - name: Using Node v18.x
        uses: actions/setup-node@v3
        id: yarn-cache
        with:
          node-version: '18.x'
          cache: 'yarn'
      - name: Update Yarn cache
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        env:
          # Using PNP linker for better performance
          YARN_NODE_LINKER: pnp
        run: yarn install --immutable
  no_dedupe_required:
    name: 'No dedupe required'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Using Node v18.x
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      - name: Ensure no dedupe required
        run: yarn dedupe --check
  all_version_bump_declared:
    name: 'All version bump declared'
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.user.login != 'renovate[bot]'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Using Node v18.x
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      - name: Ensure versions have been properly bumped
        run: yarn version check
  package_quality:
    name: 'Package quality'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Using Node v18.x
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      - name: Check package score using skypack
        run: cd packages/fast-check && yarn dlx @skypack/package-check

  # Jobs requesting warmup_yarn_cache
  format_lint:
    name: 'Format & Lint'
    needs: warmup_yarn_cache
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Using Node v18.x
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'yarn'
      - name: Install dependencies
        run: yarn workspace @fast-check/monorepo install --immutable
      - name: Check format
        run: yarn format:check
      - name: Check lint
        run: yarn lint:check
  production_packages:
    name: 'Build production packages'
    needs: warmup_yarn_cache
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Using Node v18.x
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'yarn'
      - name: Install dependencies
        run: yarn install --immutable
      - name: Build production packages
        run: yarn build-ci:all
      - name: Create bundles
        run: yarn pack:all
      - name: Upload production packages
        uses: actions/upload-artifact@v3
        with:
          name: bundles
          path: packages/**/package.tgz
          if-no-files-found: error
          retention-days: 1

  # Jobs requesting warmup_yarn_cache AND production_packages
  typecheck:
    name: 'Typecheck'
    needs:
      - warmup_yarn_cache
      - production_packages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Using Node v18.x
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'yarn'
      - name: Install dependencies
        run: yarn install --immutable
      - name: Download production packages
        uses: actions/download-artifact@v3
        with:
          name: bundles
          path: packages/
      - name: Unpack production packages
        run: yarn unpack:all
      - name: Typecheck
        run: yarn workspaces foreach -pvi run typecheck
  documentation:
    name: 'Build documentation'
    needs:
      - warmup_yarn_cache
      - production_packages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Using Node v18.x
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'yarn'
      - name: Install dependencies
        run: yarn install --immutable
      - name: Download production packages
        uses: actions/download-artifact@v3
        with:
          name: bundles
          path: packages/
      - name: Unpack production packages
        run: yarn unpack:all
      - name: Generate documentation
        run: yarn workspace website build
      - name: Generate API reference
        run: yarn workspace fast-check docs-ci
      - name: Copy API reference within documentation
        run: mv packages/fast-check/docs website/build/api-reference
      - name: Sanitize artifacts
        shell: sh
        run: |
          # Taken from https://github.com/actions/upload-pages-artifact/blob/main/action.yml
          chmod -c -R +rX "website/build/"
          tar --dereference --hard-dereference --directory "website/build/" -cvf "$RUNNER_TEMP/artifact.tar" --exclude=.git --exclude=.github
      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: github-pages
          path: ${{runner.temp}}/artifact.tar
          if-no-files-found: error
          retention-days: 1
  test_bundle:
    name: 'Test bundle'
    needs:
      - warmup_yarn_cache
      - production_packages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Using Node v18.x
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'yarn'
      - name: Install dependencies
        run: yarn install --immutable
      - name: Download production packages
        uses: actions/download-artifact@v3
        with:
          name: bundles
          path: packages/
      - name: Unpack production packages
        run: yarn unpack:all
      - name: Alter internals to behave as if published
        run: yarn workspaces foreach -pvi --no-private exec yarn node $(yarn bin packaged) --keep-node-modules
      - name: Retrieve potentially dropped test-bundle
        run: yarn workspaces foreach -pvi --no-private exec "git restore -s@ -SW -- test-bundle || true"
      - name: Check bundles
        run: yarn workspaces foreach -pvi --no-private run test-bundle
      - name: Check publication lint
        run: yarn publint:all
  test_types:
    name: 'Test types'
    needs:
      - warmup_yarn_cache
      - production_packages
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ts-version:
          # Latest version of TypeScript
          - '*'
          # Various intermediate versions of Typescript
          - '4.4'
          # Minimal requirement for TypeScript
          - '4.1'
          # Other release channels for TypeScript
          - 'rc'
          - 'next'
    steps:
      - uses: actions/checkout@v3
      - name: Using Node v18.x
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'yarn'
      - name: Install dependencies
        run: yarn install --immutable
      - name: Download production packages
        uses: actions/download-artifact@v3
        with:
          name: bundles
          path: packages/
      - name: Unpack production packages
        run: yarn unpack:all
      - name: Alter internals to behave as if published
        run: yarn workspaces foreach -pRvi --from '@fast-check/test-types' --no-private exec yarn node $(yarn bin packaged) --keep-node-modules
      - name: Drop @types to avoid failures on legacy versions of TypeScript
        if: matrix.ts-version == '4.1'
        run: mv node_modules/@types node_modules/at-types
      - name: TypeScript version
        run: |
          cd packages/test-types
          yarn dlx -p typescript@${{matrix.ts-version}} tsc --version
      - name: Test packages/test-types/
        run: |
          cd packages/test-types
          yarn dlx -p typescript@${{matrix.ts-version}} tsc
      - name: Test packages/test-types/ with --moduleResolution nodenext
        if: matrix.ts-version == 'next'
        run: |
          cd packages/test-types
          yarn dlx -p typescript@${{matrix.ts-version}} tsc --moduleResolution nodenext
      - name: Test packages/test-types/ with --exactOptionalPropertyTypes
        if: matrix.ts-version != '4.1'
        run: |
          cd packages/test-types
          sed -i 's/fc-expect-error-require-exactOptionalPropertyTypes/ts-expect-error/g' *.ts
          yarn dlx -p typescript@${{matrix.ts-version}} tsc --exactOptionalPropertyTypes
  test_node_8:
    name: 'Test legacy Node'
    needs:
      - warmup_yarn_cache
      - production_packages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Using Node v18.x
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'yarn'
      - name: Install dependencies
        run: yarn install --immutable
      - name: Download production packages
        uses: actions/download-artifact@v3
        with:
          name: bundles
          path: packages/
      - name: Unpack production packages
        run: yarn unpack:all
      - name: Alter internals to behave as if published
        run: yarn workspaces foreach -pRvi --from '@fast-check/test-minimal-support' --no-private exec yarn node $(yarn bin packaged) --keep-node-modules
      - name: Using Node v8.x
        uses: actions/setup-node@v3
        with:
          node-version: '8.x'
      - name: Test packages/test-minimal-support/
        run: |
          cd packages/test-minimal-support
          node --version
          node main.js
      # Re-install node 16, for clean-up related logic as it does not work with node 8
      # The caching logic of actions/setup-node calls yarn to know the version
      - name: Using Node v18.x
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

  # Publication jobs
  publish_documentation:
    name: 'Publish documentation'
    needs: documentation
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{steps.deployment.outputs.page_url}}
    steps:
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v2
  publish_package:
    name: 'Publish package'
    needs:
      - production_packages
      - documentation
      - format_lint
      - no_dedupe_required
      - package_quality
      - typecheck
      - test_bundle
      - test_node_8
      - test_types
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Using Node v18.x
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org'
      - name: Download production packages
        uses: actions/download-artifact@v3
        with:
          name: bundles
          path: packages/
      - if: startsWith(github.ref, 'refs/tags/v') && !startsWith(github.ref, 'refs/tags/vitest/v')
        name: Publish fast-check
        run: npm publish --access public packages/fast-check/package.tgz
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
      - if: startsWith(github.ref, 'refs/tags/ava/v')
        name: Publish @fast-check/ava
        run: npm publish --access public packages/ava/package.tgz
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
      - if: startsWith(github.ref, 'refs/tags/jest/v')
        name: Publish @fast-check/jest
        run: npm publish --access public packages/jest/package.tgz
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
      - if: startsWith(github.ref, 'refs/tags/packaged/v')
        name: Publish @fast-check/packaged
        run: npm publish --access public packages/packaged/package.tgz
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
      - if: startsWith(github.ref, 'refs/tags/poisoning/v')
        name: Publish @fast-check/poisoning
        run: npm publish --access public packages/poisoning/package.tgz
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
      - if: startsWith(github.ref, 'refs/tags/vitest/v')
        name: Publish @fast-check/vitest
        run: npm publish --access public packages/vitest/package.tgz
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
      - if: startsWith(github.ref, 'refs/tags/worker/v')
        name: Publish @fast-check/worker
        run: npm publish --access public packages/worker/package.tgz
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
      - if: startsWith(github.ref, 'refs/tags/expect-type/v')
        name: Publish @fast-check/expect-type
        run: npm publish --access public packages/expect-type/package.tgz
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}

name: Build Status

on:
  push:
    branches:
      - main
      - 'next-*_*_*'
      - 'fix-v*'
    tags:
      - v**
  pull_request:
    branches:
      - main
      - 'next-*_*_*'
      - 'fix-v*'

jobs:
  format_lint:
    name: 'Format & Lint'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Using Node v16.x
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'
          cache: 'yarn'
      - name: Install dependencies
        run: yarn install --immutable
      - name: Check format
        run: yarn format:check
      - name: Check lint
        run: yarn workspace fast-check lint:check
  typecheck:
    name: 'Typecheck'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Using Node v16.x
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'
          cache: 'yarn'
      - name: Install dependencies
        run: yarn workspace fast-check install --immutable
      - name: Build the library (dev version)
        run: yarn workspace fast-check build
      - name: Typecheck
        run: yarn workspace fast-check typecheck
  test:
    name: 'Test'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]
    steps:
      - uses: actions/checkout@v3
      - name: Cache for Jest
        uses: actions/cache@v3
        with:
          path: /tmp/jest_rt
          key: ${{runner.os}}-${{matrix.node-version}}-jest-test
      - name: Using Node v${{matrix.node-version}}
        uses: actions/setup-node@v3
        with:
          node-version: ${{matrix.node-version}}
          cache: 'yarn'
      - name: Install dependencies
        run: yarn workspace fast-check install --immutable
      - name: Build the library (dev version)
        run: yarn workspace fast-check build
      - name: Unit tests
        shell: bash -l {0}
        run: |
          export EXPECT_DEFAULT_SEED="true"
          export DEFAULT_SEED=$(node -p "Date.now() ^ (Math.random() * 0x100000000)")
          echo "DEFAULT_SEED is: ${DEFAULT_SEED}"
          yarn workspace fast-check test
      - name: Codecov
        uses: codecov/codecov-action@v3
        with:
          name: unit-tests-${{matrix.node-version}}-${{runner.os}}
          flags: unit-tests, unit-tests-${{matrix.node-version}}-${{runner.os}}
          fail_ci_if_error: false # default: false
          verbose: false # default: false
  test_e2e:
    name: 'Test E2E'
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
    steps:
      - uses: actions/checkout@v3
      - name: Cache for Jest
        uses: actions/cache@v3
        with:
          path: /tmp/jest_rt
          key: ${{runner.os}}-${{matrix.node-version}}-jest-test-e2e
      - name: Using Node v${{matrix.node-version}}
        uses: actions/setup-node@v3
        with:
          node-version: ${{matrix.node-version}}
          cache: 'yarn'
      - name: Install dependencies
        run: yarn workspace fast-check install --immutable
      - name: Build the library (dev version)
        run: yarn workspace fast-check build
      - name: End-to-end tests
        shell: bash -l {0}
        run: |
          export EXPECT_DEFAULT_SEED="true"
          export DEFAULT_SEED=$(node -p "Date.now() ^ (Math.random() * 0x100000000)")
          echo "DEFAULT_SEED is: ${DEFAULT_SEED}"
          yarn workspace fast-check e2e
  test_package_quality:
    name: 'Test package quality'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Using Node v16.x
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'
      - name: Check package score using skypack
        run: cd packages/fast-check && yarn dlx @skypack/package-check
  documentation:
    name: 'Build documentation'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Using Node v16.x
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'
          cache: 'yarn'
      - name: Install dependencies
        run: yarn workspace fast-check install --immutable
      - name: Build minimal package
        run: yarn workspace fast-check build:publish-types
      - name: Generate documentation
        run: yarn workspace fast-check docs-ci
      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: docs
          path: packages/fast-check/docs/
          if-no-files-found: error
          retention-days: 1
  production_package:
    name: 'Build production package'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Using Node v16.x
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'
          cache: 'yarn'
      - name: Install dependencies
        run: yarn workspace fast-check install --immutable
      - name: Build production package
        run: yarn workspace fast-check build:prod-ci
      - name: Create bundle
        run: yarn workspace fast-check pack --out %s.tgz
      - name: Upload production package
        uses: actions/upload-artifact@v3
        with:
          name: bundle
          path: packages/fast-check/fast-check.tgz
          if-no-files-found: error
          retention-days: 1
  test_es_version:
    name: 'Test ES Version'
    needs: production_package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download production package
        uses: actions/download-artifact@v3
        with:
          name: bundle
      - name: Extract pre-bundled lib
        run: |
          tar -xvf fast-check.tgz package/lib
          mv package/lib packages/fast-check/lib
      - name: Using Node v16.x
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'
          cache: 'yarn'
      - name: Install dependencies
        run: yarn workspace fast-check install --immutable
      - name: Check ES Version
        run: yarn workspace fast-check test:es
  test_examples:
    name: 'Test examples/'
    needs: production_package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Using Node v16.x
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'
      - name: Download production package
        uses: actions/download-artifact@v3
        with:
          name: bundle
      - name: Install dependencies but use current build for fast-check
        uses: ./.github/actions/install-deps-with-current-fc
        with:
          package: '@fast-check/examples'
          path: 'examples'
      - name: Typecheck examples/
        run: yarn workspace @fast-check/examples typecheck
      - name: Test examples/
        run: yarn workspace @fast-check/examples test
  test_types:
    name: 'Test types'
    needs: production_package
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ts-version:
          # Latest version of TypeScript
          - '*'
          # Various intermediate versions of Typescript
          - '4.4'
          # Minimal requirement for TypeScript
          - '4.1'
          # Other release channels for TypeScript
          - 'rc'
          - 'next'
    steps:
      - uses: actions/checkout@v3
      - name: Using Node v16.x
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'
      - name: Download production package
        uses: actions/download-artifact@v3
        with:
          name: bundle
      - name: Install dependencies but use current build for fast-check
        uses: ./.github/actions/install-deps-with-current-fc
        with:
          package: '@fast-check/test-types'
          path: 'packages/test-types'
      - name: TypeScript version
        run: |
          cd packages/test-types
          yarn dlx -p typescript@${{matrix.ts-version}} tsc --version
      - name: Test packages/test-types/
        run: |
          cd packages/test-types
          yarn dlx -p typescript@${{matrix.ts-version}} tsc
      - name: Test packages/test-types/ with --moduleResolution nodenext
        if: matrix.ts-version == 'next'
        run: |
          cd packages/test-types
          yarn dlx -p typescript@${{matrix.ts-version}} tsc --moduleResolution nodenext
      - name: Test packages/test-types/ with --exactOptionalPropertyTypes
        if: matrix.ts-version != '4.1'
        run: |
          cd packages/test-types
          sed -i 's/fc-expect-error-require-exactOptionalPropertyTypes/ts-expect-error/g' *.ts
          yarn dlx -p typescript@${{matrix.ts-version}} tsc --exactOptionalPropertyTypes
  test_node_8:
    name: 'Test legacy Node'
    needs: production_package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Using Node v16.x
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'
      - name: Download production package
        uses: actions/download-artifact@v3
        with:
          name: bundle
      - name: Install dependencies but use current build for fast-check
        uses: ./.github/actions/install-deps-with-current-fc
        with:
          package: '@fast-check/test-minimal-support'
          path: 'packages/test-minimal-support'
      - name: Using Node v8.x
        uses: actions/setup-node@v3
        with:
          node-version: '8.x'
      - name: Test packages/test-minimal-support/
        run: |
          cd packages/test-minimal-support
          node --version
          node main.js
  test_cjs_esm:
    name: 'Test CJS & ESM'
    needs: production_package
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
          # Node latest version supports ES modules by default
          - 'node'
          # Node >=13.2.0 enables support for ES modules by default
          # Our default version of node is above 13.2.0
          - '14'
          # Node 12.20 includes import from CJS and removes warnings related to ES Modules
          - '12.20'
          # Node 12.x and >=12.18 enables support for ES modules by default
          - '12.18'
          # Node <12.18 requires a flag to support ES modules but can understand them
          - '12.17'
          # Node 10 does not understand ES modules
          - '10'
          # Node 13 supports ES modules a bit differently from others
          - '13.2'
          - '13.6'
          - '13.7'
          - '13'
    steps:
      - uses: actions/checkout@v3
      - name: Using Node v${{matrix.node-version}}
        shell: bash -l {0}
        run: nvm install ${{matrix.node-version}}
      - name: Download production package
        uses: actions/download-artifact@v3
        with:
          name: bundle
      - name: Install dependencies but use current build for fast-check (node-extension-cjs)
        uses: ./.github/actions/install-deps-with-current-fc
        with:
          package: '@fast-check/test-bundle-node-extension-cjs'
          path: 'packages/test-bundle-node-extension-cjs'
      - name: Install dependencies but use current build for fast-check (node-extension-mjs)
        uses: ./.github/actions/install-deps-with-current-fc
        with:
          package: '@fast-check/test-bundle-node-extension-mjs'
          path: 'packages/test-bundle-node-extension-mjs'
      - name: Install dependencies but use current build for fast-check (node-with-import)
        uses: ./.github/actions/install-deps-with-current-fc
        with:
          package: '@fast-check/test-bundle-node-with-import'
          path: 'packages/test-bundle-node-with-import'
      - name: Install dependencies but use current build for fast-check (node-with-require)
        uses: ./.github/actions/install-deps-with-current-fc
        with:
          package: '@fast-check/test-bundle-node-with-require'
          path: 'packages/test-bundle-node-with-require'
      - name: Install dependencies but use current build for fast-check (rollup-with-import)
        uses: ./.github/actions/install-deps-with-current-fc
        with:
          package: '@fast-check/test-bundle-rollup-with-import'
          path: 'packages/test-bundle-rollup-with-import'
      - name: Install dependencies but use current build for fast-check (rollup-with-require)
        uses: ./.github/actions/install-deps-with-current-fc
        with:
          package: '@fast-check/test-bundle-rollup-with-require'
          path: 'packages/test-bundle-rollup-with-require'
      - name: Install dependencies but use current build for fast-check (webpack-with-import)
        uses: ./.github/actions/install-deps-with-current-fc
        with:
          package: '@fast-check/test-bundle-webpack-with-import'
          path: 'packages/test-bundle-webpack-with-import'
      - name: Install dependencies but use current build for fast-check (webpack-with-require)
        uses: ./.github/actions/install-deps-with-current-fc
        with:
          package: '@fast-check/test-bundle-webpack-with-require'
          path: 'packages/test-bundle-webpack-with-require'
      - name: Install dependencies but use current build for fast-check (esbuild-with-import)
        uses: ./.github/actions/install-deps-with-current-fc
        with:
          package: '@fast-check/test-bundle-esbuild-with-import'
          path: 'packages/test-bundle-esbuild-with-import'
      - name: Install dependencies but use current build for fast-check (esbuild-with-require)
        uses: ./.github/actions/install-deps-with-current-fc
        with:
          package: '@fast-check/test-bundle-esbuild-with-require'
          path: 'packages/test-bundle-esbuild-with-require'
      - name: Check compatibility
        run: |
          cd packages
          node --version
          sh run-test-bundle.sh
  publish_documentation:
    name: 'Publish documentation'
    needs: documentation
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download documentation
        uses: actions/download-artifact@v3
        with:
          name: docs
          path: packages/fast-check/docs/
      - name: Publish to gh-pages
        uses: JamesIves/github-pages-deploy-action@v4.3.3
        with:
          branch: gh-pages
          folder: docs
          clean: true
  publish_package:
    name: 'Publish package'
    needs:
      - production_package
      - documentation
      - format_lint
      - typecheck
      - test
      - test_e2e
      - test_cjs_esm
      - test_examples
      - test_node_8
      - test_es_version
      - test_package_quality
      - test_types
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Using Node v16.x
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'
          registry-url: 'https://registry.npmjs.org'
      - name: Download production package
        uses: actions/download-artifact@v3
        with:
          name: bundle
      - name: Publish package
        run: npm publish fast-check.tgz
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}

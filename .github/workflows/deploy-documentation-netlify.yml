name: Deploy Documentation to Netlify

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull Request number'
        required: true
        type: number
      draft:
        description: 'Deploy as draft (true) or production (false)'
        required: false
        type: boolean
        default: true

permissions:
  contents: read
  pull-requests: write

jobs:
  build_documentation:
    name: 'Build documentation'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0 # all history in order to be able to show last-edited-at dates
      - name: Install pnpm
        uses: pnpm/action-setup@41ff72655975bd51cab0327fa583b6e92b6d3061 # v4.2.0
      - name: Using Node v24.x
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v6.0.0
        with:
          node-version: '24.x'
          cache: 'pnpm'
      - name: Install dependencies for website
        run: pnpm --filter website install --frozen-lockfile
      - name: Install dependencies for production packages
        run: pnpm install --frozen-lockfile
      - name: Build production packages
        run: node --run build-ci:all
      - name: Create bundles
        run: node --run pack:all
      - name: Unpack production packages
        run: node --run unpack:all
      - name: Get date cache buster
        id: get-date
        shell: bash
        run: echo "date=$(/bin/date -u "+%Y%m")" >> $GITHUB_OUTPUT
      - name: Cache for assets
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: |
            website/static/img/sponsors.svg
            website/static/img/_
            website/static/img/**/*.gif
            website/static/img/**/*.png
          key: assets-${{steps.get-date.outputs.date}}-${{hashFiles('.all-contributorsrc', 'website/prebuild/optimize-images.mjs')}}
      - name: Generate documentation
        run: pnpm --filter website run build
      - name: Generate API reference
        run: |
          pnpm --filter fast-check install --frozen-lockfile
          pnpm --filter fast-check run docs-ci
      - name: Copy API reference within documentation
        run: mv packages/fast-check/docs website/build/api-reference
      - name: Copy raw logo within documentation
        run: cp website/static/img/logo.png website/build/assets/images/logo.png
      - name: Upload documentation artifacts
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5.0.0
        with:
          name: website
          path: website/build/
          if-no-files-found: error
          retention-days: 1

  deploy_to_netlify:
    name: 'Deploy to Netlify'
    needs: build_documentation
    runs-on: ubuntu-latest
    steps:
      - name: Download documentation artifacts
        uses: actions/download-artifact@018cc2cf5baa6db3ef3c5f8a56943fffe632ef53 # v6.0.0
        with:
          name: website
          path: artifacts/
      - name: Alter robots.txt for draft build
        if: inputs.draft == true
        run: |
          echo "User-agent: *" > artifacts/robots.txt
          echo "Disallow: /" >> artifacts/robots.txt
      - name: Configure custom headers
        run: |
          echo "/*" > artifacts/_headers
          echo "  Content-Security-Policy: default-src 'self'; img-src 'self' data: badge.fury.io *.cloudfront.net img.shields.io raw.githubusercontent.com www.netlify.com api.securityscorecards.dev bestpractices.coreinfrastructure.org www.bestpractices.dev cdn.bsky.app;connect-src *.algolia.net *.algolianet.com public.api.bsky.app api.counterapi.dev;script-src 'self' 'unsafe-inline' 'unsafe-eval';frame-src 'self' *.codesandbox.io www.youtube-nocookie.com; style-src 'self' 'unsafe-inline'; manifest-src 'self'; base-uri fast-check.dev;" >> artifacts/_headers
          echo "/api-reference/*" >> artifacts/_headers
          echo "  Content-Security-Policy: default-src 'none'; img-src 'self' data:; connect-src data:; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';" >> artifacts/_headers
      - name: Compress documentation artifacts as zip
        run: zip -r artifacts.zip artifacts
      - name: Deploy to Netlify
        id: deployment_to_netlify
        run: |
          curl -H "Content-Type: application/zip" -H "Authorization: Bearer ${{secrets.NETLIFY_AUTH_TOKEN}}" --data-binary "@artifacts.zip" https://api.netlify.com/api/v1/sites/${{secrets.NETLIFY_SITE_ID}}/deploys?draft=${{inputs.draft}} > deploy.json
          cat deploy.json
          deploy_url=$(jq -r '.deploy_url' --exit-status deploy.json)
          echo "deploy_url=$deploy_url" >> $GITHUB_OUTPUT
      - uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        name: Comment on PR with success
        if: success()
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: ${{ inputs.pr_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üëã A preview of the new documentation is available at: ${{steps.deployment_to_netlify.outputs.deploy_url}}'
            })
      - uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        name: Comment on PR with failure
        if: failure()
        with:
          script: |
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            github.rest.issues.createComment({
              issue_number: ${{ inputs.pr_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚ùå Documentation deployment to Netlify failed. See the [workflow run](${runUrl}) for details.`
            })

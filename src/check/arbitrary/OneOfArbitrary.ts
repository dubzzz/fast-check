import { Random } from '../../random/generator/Random';
import { Arbitrary } from './definition/Arbitrary';
import { Shrinkable } from './definition/Shrinkable';

/** @internal */
class OneOfArbitrary<T> extends Arbitrary<T> {
  constructor(readonly arbs: Arbitrary<T>[]) {
    super();
  }
  generate(mrng: Random): Shrinkable<T> {
    const id = mrng.nextInt(0, this.arbs.length - 1);
    return this.arbs[id].generate(mrng);
  }
  withBias(freq: number) {
    return new OneOfArbitrary(this.arbs.map((a) => a.withBias(freq)));
  }
}

/**
 * Infer the type of the Arbitrary produced by {@link oneof}
 * given the type of the source arbitraries
 * @public
 */
export type OneOfValue<Ts extends Arbitrary<unknown>[]> = {
  [K in keyof Ts]: Ts[K] extends Arbitrary<infer U> ? U : never;
}[number];

/**
 * For one of the values generated by `...arbs` - with all `...arbs` equiprobable
 *
 * **WARNING**: It expects at least one arbitrary
 *
 * @param arbs - Arbitraries that might be called to produce a value
 *
 * @public
 */
function oneof<Ts extends Arbitrary<unknown>[]>(...arbs: Ts): Arbitrary<OneOfValue<Ts>> {
  if (arbs.length === 0) {
    throw new Error('fc.oneof expects at least one parameter');
  }
  return new OneOfArbitrary<OneOfValue<Ts>>([...arbs] as Arbitrary<OneOfValue<Ts>>[]);
}

export { oneof };

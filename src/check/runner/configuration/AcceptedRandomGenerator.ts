import { RandomGenerator } from 'pure-rand';

/**
 * Interface for `RandomGenerator` as declared in pure-rand for versions <5.x.x
 * @remarks Since 2.17.0
 * @public
 */
export interface LegacyRandomGenerator {
  /** Minimal value (included) that could be generated by this generator */
  min(): number;
  /** Maximal value (included) that could be generated by this generator */
  max(): number;
  /** Generate next random value along with the next generator (does not impact current instance) */
  next(): [number, LegacyRandomGenerator];
  /** Compute the jumped generator (does not impact current instance) */
  jump?(): LegacyRandomGenerator;
}

/**
 * Accepted types for instances of `RandomGenerator`
 * @remarks Since 2.17.0
 * @public
 */
export type AcceptedRandomGenerator = RandomGenerator | LegacyRandomGenerator;

/** @internal */
class ConvertedRandomGenerator implements RandomGenerator {
  jump?: RandomGenerator['jump'];
  unsafeJump?: RandomGenerator['unsafeJump'];
  constructor(private rng: AcceptedRandomGenerator) {
    if (typeof this.rng.jump === 'function') {
      this.jump = function jump() {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const out = this.jump!();
        return new ConvertedRandomGenerator(out);
      };
      this.unsafeJump = function unsafeJump() {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const out = this.jump!();
        this.rng = out;
      };
    }
  }
  min(): number {
    return this.rng.min();
  }
  max(): number {
    return this.rng.max();
  }
  clone(): RandomGenerator {
    return new ConvertedRandomGenerator(this.rng);
  }
  next(): [number, RandomGenerator] {
    const out = this.rng.next();
    return [out[0], new ConvertedRandomGenerator(out[1])];
  }
  unsafeNext(): number {
    const out = this.rng.next();
    this.rng = out[1];
    return out[0];
  }
}

/** @internal */
export function convertToRandomGenerator(rng: AcceptedRandomGenerator): RandomGenerator {
  if ('clone' in rng && 'unsafeNext' in rng) {
    return rng;
  }
  return new ConvertedRandomGenerator(rng);
}
